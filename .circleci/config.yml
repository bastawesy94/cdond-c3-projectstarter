version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration
    parameters:
        workflow_id:
            default: "${CIRCLE_WORKFLOW_ID:0:7}"
            type: string      
    steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
                # Example: kvdb.io
                export SUCCESS=$(curl --insecure  https://kvdb.io/9VEuowm1s2ik3wC3fMHC2q/migration_<< parameters.workflow_id >>)
                echo "$SUCCESS"
                # Logic for reverting the database state
                if (( $SUCCESS == 1 ));
                then
                    cd ~/project/backend
                    npm install
                    npm run migration:revert
                fi              
orbs:
  slack: circleci/slack@4.10.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
            cd backend
            npm install
            npm run test        

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end analyze
          command: |
            cd frontend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force 
            # npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end analyze
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force  
            # npm audit --audit-level=critical
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "Build (backend and frontend) are passed successfully",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
  #infrastructure jobs
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Setup required dependancies
          command: |
           yum -y install tar
           yum -y install  gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment
  #configure infra
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["eb:7b:39:8d:53:4c:44:70:4e:f4:ea:d9:1a:75:bb:ae"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
            pip install awscli
            ansible --version
            aws --version
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml 
      - destroy-environment
  #db migration
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
         name: Install dependencies
         command: |
           sudo apt update -y
           sudo apt install awscli -y
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - destroy-environment       
      - run:
          name: Send migration results to memstash
          command: |
              # cat ~/project/backend/migrations_dump.txt
              # if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              # then
                  # If you are using kvdb.io, generate the bucket ID "9VEuowm1s2ik3wC3fMHC2q" in your local terminal first
                  echo "${CIRCLE_WORKFLOW_ID:0:7}"
                  curl --insecure https://kvdb.io/9VEuowm1s2ik3wC3fMHC2q/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                  curl --insecure https://kvdb.io/9VEuowm1s2ik3wC3fMHC2q/migration_${CIRCLE_WORKFLOW_ID:0:7}
              # fi
      - destroy-environment
  smoke-test:
    docker:
        - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update
            apk upgrade
            apk add curl
            pip install awscli
            aws --version
      - run: sleep 60;  #sleep 60 after deploy
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations 
                    
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            yum install -y gcc-c++ make
            # yum install -y tar gzip
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs

      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment      
  deploy-backend:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["eb:7b:39:8d:53:4c:44:70:4e:f4:ea:d9:1a:75:bb:ae"]
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible
              apk add --update tar
              apk add --update gzip
              pip install awscli
              apk add --update nodejs npm
              ansible --version
        - run:
            name: Deploy backend
            command: |
              cd backend
              npm i
              npm run build
              cd ..
              # Zip the directory
              tar -C backend -czvf artifact.tar.gz .
              cd .circleci/ansible
              echo "Contents  of the inventory.txt file is -------"
              cat inventory.txt
              echo "after inventory priiiiint"
              ansible-playbook -i inventory.txt deploy-backend.yml
        - destroy-environment
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              yum -y install tar
              yum -y install  gzip
      - run:
          name: Update cloudfront distribution
          command: |
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment
      - revert-migrations
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"          
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
              echo "OldWorkflowID: ${OldWorkflowID}"
              export CODE=${OldWorkflowID:10}
              echo ${CODE}
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${CODE}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${CODE}"
              export BUCKET_ID="udapeople-${OldWorkflowID}"
              # aws s3api delete-bucket --bucket udapeople-e91f312
              
              # aws s3 rm "s3://${BUCKET_ID}" --recursive
            else
              echo "###########  ==> clean up is faild "
            fi
    
                          
workflows:
  default:
    jobs:
      # - build-backend
      # - build-frontend
      # - test-frontend:
      #     requires:
      #       - build-frontend
      # - test-backend:
      #     requires:
      #       - build-backend
      # - scan-backend:
      #     requires:
      #       - build-backend
      # - scan-frontend:
      #     requires:
      #       - build-frontend
      # - notify:
      #     context: slack-secrets
      #     requires:
      #       - scan-backend
      #       - scan-frontend
      #     filters:
      #       branches:
      #         only:
      #           - master
          
      # - deploy-infrastructure
          # requires: 
          #  - notify
      # - configure-infrastructure:
      #       requires: 
      #         - deploy-infrastructure
      # - run-migrations:
      #     requires:
      #       - configure-infrastructure
      # - deploy-frontend:
      #     requires:
      #       - run-migrations
      # - deploy-backend:
      #     requires:
      #       - run-migrations
      # - smoke-test:
      #     requires:
      #       - deploy-backend
      #       - deploy-frontend
      # - cloudfront-update:
          # requires:
            # - smoke-test
              # requires:
              #   - deploy-backend
              #   - deploy-frontend

      - cleanup
          # requires:
          #   - cloudfront-update       
